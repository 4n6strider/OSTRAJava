/* Copyright (c) 2006, Sun Microsystems, Inc.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Sun Microsystems, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */


options {
  MULTI=true;
  JAVA_UNICODE_ESCAPE = true;
  //NODE_EXTENDS="OSTRANode";
  TRACK_TOKENS=true;
  //NODE_DEFAULT_VOID = true;
}

PARSER_BEGIN(OSTRAJavaParser)

package cz.cvut.fit.ostrajava.Parser;

public class OSTRAJavaParser {

    public Node rootNode() {
      return jjtree.rootNode();
    }

}

PARSER_END(OSTRAJavaParser)


SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}



TOKEN : /* RESERVED WORDS AND LITERALS */
{
<BEGIN: "banik" >
| < END: "fajront" >
| < ENDLINE: "pyco" >
| < CLASS: "tryda" >
| < EXTENDS: "fagan od" >
| < DECLARATION: "toz" >
| < THROW: "mrdnut" >
| < THROWS: "muze mrdnut" >
| < SUPER: "forant" >
| < THIS: "joch" >
| < VOID: "fraj" >
| < NULL: "chuj" >
| < TRUE: "fajne" >
| < FALSE: "nyt" >
| < NEW: "zrob" >
| < IF: "kaj" >
| < ELSEIF: "kajtez" >
| < ELSE: "boinak" >
| < WHILE: "dokavad" >
| < BREAK: "zdybat" >
| < CONTINUE: "dlabat" >
| < DO: "rubat" >
| < TRY: "lajsnut" >
| < CATCH: "lapnut" >
| < FINALLY: "fertyk" >
| < PRINT: "pravit" >
| < RETURN: "davaj" >

| < INT: "number" >
| < BOOLEAN: "bool" >
| < FLOAT: "float" >
| < STRING: "string" >

//translate
| < SWITCH: "switch" >
| < CASE: "case" >
| < _DEFAULT: "default" >
| < FOR: "for" >
| < INSTANCEOF: "instanceof" >


//?
| < IMPORT: "import" >





//| < SHORT: "short" >




}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}


TOKEN : /* SEPARATORS */
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < COMMA: "," >
| < DOT: "." >
}

TOKEN : /* OPERATORS */
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "bo" >
| < SC_AND: "aj" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < REM: "%" >

}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}




/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */


void CompilationUnit():
{}
{
  Begin()
  ( ClassDeclaration() )*
  ( BlockStatement() )*
  End()
  <EOF>
}

void Begin() #void:
{}
{
    "banik" "pyco"
}

void End() #void:
{}
{
    "fajront" "pyco"
}

/*
 * Declaration syntax follows.
 */

void ClassDeclaration() #Class:
{ Token t; }
{
  "tryda" t = <IDENTIFIER> {jjtThis.name = t.image;} [ "fagan od" t = <IDENTIFIER> {jjtThis.extending = t.image;} ] /*[ "implements" NameList() ]*/
  "{" ( ClassBodyDeclaration() )* "}"
}

void ClassBodyDeclaration() #void:
{}
{

  LOOKAHEAD( Name() "(" )
  ConstructorDeclaration()
|
  LOOKAHEAD( MethodDeclarationLookahead() )
  MethodDeclaration()
|
  FieldDeclaration()
}

// This production is to determine lookahead only.
void MethodDeclarationLookahead() :
{}
{
  ResultType() <IDENTIFIER> "("
}

/*void InterfaceDeclaration() :
{}
{
  ( "abstract" | "public" )*
  "interface" <IDENTIFIER> [ "extends" NameList() ]
  "{" ( InterfaceMemberDeclaration() )* "}"
}

void InterfaceMemberDeclaration() :
{}
{
  LOOKAHEAD( MethodDeclarationLookahead() )
  MethodDeclaration()
|
  FieldDeclaration()
}*/

void FieldDeclaration() :
{}
{
  "toz" Type() VariableDeclaratorId() ( "," VariableDeclaratorId() )* "pyco"
}

void VariableDeclarator() :
{}
{
  VariableDeclaratorId() [ "=" Literal() ]
}

void VariableDeclaratorId() #Variable:
{Token t;}
{
  t = <IDENTIFIER> {jjtThis.value = t.image;} ( "[" "]" )*
}

void VariableInitializer() :
{}
{
  "{" [ VariableInitializer() ( LOOKAHEAD(2) "," VariableInitializer() )* ] [ "," ] "}"
|
  Expression()
}

void MethodDeclaration() :
{}
{
  ResultType() MethodDeclarator() [ "muze mrdnut" NameList() ]
  ( Block() | "pyco" )
}

void MethodDeclarator() #Method:
{Token t;}
{
  t = <IDENTIFIER> {jjtThis.value = t.image; } FormalParameters()
}

void FormalParameters() :
{}
{
  "(" [ FormalParameter() ( "," FormalParameter() )* ] ")"
}

void FormalParameter() :
{}
{
  Type() VariableDeclaratorId()
}

void ConstructorDeclaration() :
{}
{
  <IDENTIFIER> FormalParameters() [ "muze mrdnut" NameList() ]
  "{" [ LOOKAHEAD(2) ExplicitConstructorInvocation() ] ( BlockStatement() )* "}"
}

void ExplicitConstructorInvocation() :
{}
{
  "joch" Arguments() "pyco"
|
  "forant" Arguments() "pyco"
}




/*
 * Type, name and expression syntax follows.
 */

void Type():
{}
{
  ( PrimitiveType() | Name() ) ( "[" "]" )*
}

void PrimitiveType() #void:
{}
{
"bool" #Bool
|
"string" #String
|
 "number"  #Number
|
 "float"  #Float

}

void ResultType() :
{}
{
  "fraj"
|
  Type()
}

void Name() :
{Token t;}
{
  t = <IDENTIFIER> {jjtThis.value = t.image; }
}

void NameList() :
{}
{
  Name()
  ( "," Name()
  )*
}


/*
 * Expression syntax follows.
 */

void Expression() :
{}
{
  LOOKAHEAD( PrimaryExpression() AssignmentOperator() )
  Assignment()
|
  ConditionalExpression()
}

void Assignment() :
{}
{
  PrimaryExpression() AssignmentOperator() Expression()
}

void AssignmentOperator() :
{}
{
  "="
}

void ConditionalExpression() :
{}
{
  ConditionalOrExpression()
}

void ConditionalOrExpression() :
{}
{
  ConditionalAndExpression() ( "bo" ConditionalAndExpression() )*
}

void ConditionalAndExpression() :
{}
{
  EqualityExpression() ( "aj" EqualityExpression() )*
}

void EqualityExpression() :
{}
{
  InstanceOfExpression() ( ( "==" | "!=" ) InstanceOfExpression() )*
}

void InstanceOfExpression() :
{}
{
  RelationalExpression() [ "instanceof" Type() ]
}

void RelationalExpression() :
{}
{
  AdditiveExpression() ( ( "<" | ">" | "<=" | ">=" ) AdditiveExpression() )*
}



void AdditiveExpression() :
{}
{
  MultiplicativeExpression() ( ( "+" | "-" ) MultiplicativeExpression() )*
}

void MultiplicativeExpression() :
{}
{
  UnaryExpression() ( ( "*" | "/" | "%" ) UnaryExpression() )*
}

void UnaryExpression() :
{}
{
  ( "+" | "-" ) UnaryExpression()
|
  UnaryExpressionNotPlusMinus()
}



void UnaryExpressionNotPlusMinus() :
{}
{
  ( "!" ) UnaryExpression()
|
  PrimaryExpression()
}

void PrimaryExpression() :
{}
{
  PrimaryPrefix() ( PrimarySuffix() )*
}

void PrimaryPrefix() :
{}
{
  Literal()
|
  Name()
|
  "joch"
|
  "forant" "." <IDENTIFIER>
|
  "(" Expression() ")"
|
  AllocationExpression()
}

void PrimarySuffix() :
{}
{
  "[" Expression() "]"
|
  "." <IDENTIFIER>
|
  Arguments()
}

void Literal() #void:
{Token t;}
{
  t = <INTEGER_LITERAL>  {jjtThis.value = t.image; } #NumberLiteral
|
  t = <FLOATING_POINT_LITERAL>  {jjtThis.value = t.image; } #FloatLiteral
|
 /* <CHARACTER_LITERAL>
|*/
  t = <STRING_LITERAL>  {jjtThis.value = t.image; } #StringLiteral
|
  BooleanLiteral()
|
  NullLiteral()
}

void BooleanLiteral() :
{}
{
  "fajne"
|
  "nyt"
}

void NullLiteral() :
{}
{
  "chuj"
}

void Arguments() :
{}
{
  "(" [ ArgumentList() ] ")"
}

void ArgumentList() :
{}
{
  Expression() ( "," Expression() )*
}

void AllocationExpression() :
{}
{
  LOOKAHEAD(2)
  "zrob" PrimitiveType() ArrayDimensions()
|
  "zrob" Name() ( Arguments() | ArrayDimensions() )
}

/*
 * The second LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
void ArrayDimensions() :
{}
{
  ( LOOKAHEAD(2) "[" Expression() "]" )+ ( LOOKAHEAD(2) "[" "]" )*
}


/*
 * Statement syntax follows.
 */

void Statement() :
{}
{
  LOOKAHEAD(2)
  Block()
|
  EmptyStatement()
|
  StatementExpression() "pyco"
|
  SwitchStatement()
|
  IfStatement()
|
  WhileStatement()
|
  DoStatement()
|
  ForStatement()
|
  BreakStatement()
|
  ContinueStatement()
|
  ReturnStatement()
|
  ThrowStatement()
|
  TryStatement()
|
  PrintStatement()
}


void Block()  :
{}
{
  "{" ( BlockStatement() )* "}"
}

void BlockStatement() #void:
{}
{
  LOOKAHEAD("toz")
  LocalVariableDeclaration() "pyco"
|
  Statement()
}

void LocalVariableDeclaration() :
{}
{
  "toz" Type() VariableDeclarator() ( "," VariableDeclarator() )*
}

void EmptyStatement() :
{}
{
  "pyco"
}

void StatementExpression() :
/*
 * The last expansion of this production accepts more than the legal
 * Java expansions for StatementExpression.
 */
{}
{

  LOOKAHEAD( PrimaryExpression() AssignmentOperator() )
  Assignment()
|
  PrimaryExpression()
}

void SwitchStatement() :
{}
{
  "switch" "(" Expression() ")" "{"
    ( SwitchLabel() ( BlockStatement() )* )*
  "}"
}

void SwitchLabel() :
{}
{
  "case" Expression() ":"
|
  "default" ":"
}

void IfStatement() :
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */
{}
{
  "kaj" "(" Expression() ")" Statement() ( LOOKAHEAD(2) "kajtez (" Expression() ")" Statement() )* [ LOOKAHEAD(1) "boinak" Statement() ]
}

void WhileStatement() :
{}
{
  "dokavad" "(" Expression() ")" Statement()
}

void DoStatement() :
{}
{
  "rubat" Statement() "dokavad" "(" Expression() ")" "pyco"
}

void ForStatement() :
{}
{
  "for" "(" [ ForInit() ] ";" [ Expression() ] ";" [ ForUpdate() ] ")" Statement()
}

void ForInit() :
{}
{
  LOOKAHEAD( Type() <IDENTIFIER> )
  LocalVariableDeclaration()
|
  StatementExpressionList()
}

void StatementExpressionList() :
{}
{
  StatementExpression() ( "," StatementExpression() )*
}

void ForUpdate() :
{}
{
  StatementExpressionList()
}

void BreakStatement() :
{}
{
  "zdybat" [ <IDENTIFIER> ] "pyco"
}

void ContinueStatement() :
{}
{
  "dlabat" [ <IDENTIFIER> ] "pyco"
}

void ReturnStatement() :
{}
{
  "davaj" [ Expression() ] "pyco"
}

void ThrowStatement() :
{}
{
  "mrdnut" Expression() "pyco"
}


void TryStatement() :
/*
 * Semantic check required here to make sure that at least one
 * finally/catch is present.
 */
{}
{
  "lajsnut" Block()
  ( "lapnut" "(" FormalParameter() ")" Block() )*
  [ "fertyk" Block() ]
}

void PrintStatement() :
{}
{
  "pravit" Expression() "pyco"
}
